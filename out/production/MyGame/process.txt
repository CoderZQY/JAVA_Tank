日志：
1：对游戏窗口初始化：标题，大小，坐标，窗口的监听事件
2：游戏菜单的显示，以及游戏按键的设置
游戏被分为若干状态：
    游戏菜单
    游戏帮助
    游戏关于
    游戏中
    游戏结束
在不同状态下，绘制不同的窗口，按键有不同的处理方式
3：调整整个游戏窗口的重绘机制
FPS：frame per second
要每秒固定的刷新整个窗口，fps = 30帧
每隔30ms 刷新一次（重绘） repaint
单独启动一个线程用于窗口的绘制
4：坦克类的定义、绘制
5：坦克的行走（四方向）以及边界的控制
6：坦克发射子弹
7：坦克的绘制使用图片
8：解决屏幕闪烁问题：双缓冲
9：子弹的效率问题
解决方案：使用对象池来解决，提前创建好若干个对象，放到一个容器里面
         需要的时候从对象池中取出一个使用，当子弹需要被销毁的时候，
         放回到原来的对象池中
10：敌人坦克的控制
   Ⅰ、随机的在屏幕的左上角、右上角产生
   Ⅱ、坦克相关的类：父类：Tank
                   子类：MyTank、EnemyTank
11：敌人坦克AI：每隔五秒让敌人随机获得一个状态(站立、行走)
    敌人发射子弹的AI：游戏的每一帧都随机(5%)判断敌人是否发射子弹
12：添加爆炸类 · 爆炸效果的控制
13：使用对象池来管理爆炸对象
14：给坦克添加血条和名字
15：自己坦克死亡处理 · 切换游戏状态 · 游戏结束
    两个选择：1、重新开始； 2、回到主菜单
16：地图   地图元素类
设计：上、左右距离窗口的宽度为1.5倍的坦克宽度
17：实现一个地图的绘制显示
18：优化了地图随机初始化（不重叠）
          子弹和地图碰撞
19：坦克和地图的碰撞
20：坦克之间的碰撞
21：出生效果的添加
22：玩家的老巢
23：控制玩家发射炮弹的速度（最小间隔：1s）
24：添加其他种类的地图元素：
    不可击毁的地图
    遮挡物
25：添加关卡
    关卡的设计：
    1：敌人坦克的数量
    2：地图元素块的不同摆放方式
    3：敌人类型的不同
    4：使用简单的文本来实现关卡的设计(每关对应一个文本)
26：背景音乐、音效
27：程序解析关卡信息
    ->根据关卡信息创建敌人：
        1、根据敌人类型去创建敌人
        2、关卡难度
    ->实现当前关卡的结束
    ->获得所有关卡的数量
        ->判断过关、关卡的切换
        ->判断游戏通关、通关画面
28: 游戏帮助，游戏关于的完善
29；游戏的保存（简单的只保留游戏玩到第几关）//TODO
30: 数据库的建立                         //TODO
